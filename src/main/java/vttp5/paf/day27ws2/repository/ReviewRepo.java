package vttp5.paf.day27ws2.repository;

import java.security.Timestamp;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Optional;

import org.bson.Document;

import org.bson.types.ObjectId;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.stereotype.Repository;

import jakarta.json.Json;
import jakarta.json.JsonObject;
import vttp5.paf.day27ws2.utils.Constant;

@Repository
public class ReviewRepo {

    @Autowired
    MongoTemplate template;

    /*
        db.getCollection("games")
            .findOne({"_id" : ObjectId('6790519247fc55943a3cf6d0')})
     */
    
    // Should be in gamerepo
    public Optional<Document> getGameById(String gameId)
    {
        ObjectId gameObjectId = new ObjectId(gameId);

        Criteria criteria = Criteria.where(Constant.G_F_OID).is(gameObjectId);

        Query query = Query.query(criteria);

        Document result = template.findOne(query, Document.class, Constant.C_GAMES);

        // ObjectId id = result.getObjectId("_id");

        return Optional.ofNullable(result);
    }



    public Document insertReview(Document review)
    {
        
        Document result = template.insert(review, Constant.C_REVIEWS); // result is the insertedObject, if _id is excluded in docReviewToInsert, result will include the autogenerated _id

        System.out.println(">>>>> result inserted is: " + result); // just to see what result is

        return result;
    }


    /*
        db.getCollection("reviews")
            .findOne({"_id" : ObjectId('6790519247fc55943a3cf6d0')})
     */

    public Optional<Document> getReviewById(String reviewId)
    {
        ObjectId reviewObjectId = new ObjectId(reviewId);

        Criteria criteria = Criteria.where(Constant.R_F_OID).is(reviewObjectId);

        Query query = Query.query(criteria);

        Document result = template.findOne(query, Document.class, Constant.C_REVIEWS);

        return Optional.ofNullable(result);
    }

    public Document updateReview(Document update)
    {
        return null;
    }
    
}
