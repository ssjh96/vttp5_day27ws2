package vttp5.paf.day27ws2.repository;

import java.security.Timestamp;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Optional;

import org.bson.Document;

import org.bson.types.ObjectId;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.data.mongodb.core.query.Update;
import org.springframework.stereotype.Repository;

import com.mongodb.client.result.UpdateResult;

import jakarta.json.Json;
import jakarta.json.JsonObject;
import vttp5.paf.day27ws2.utils.Constant;

@Repository
public class ReviewRepo {

    @Autowired
    MongoTemplate template;

    /*
        db.getCollection("games")
            .findOne({"_id" : ObjectId('6790519247fc55943a3cf6d0')})    // find the game ObjectId
     */
    
    // Should be in gamerepo
    public Optional<Document> getGameById(String gameId)
    {
        ObjectId gameObjectId = new ObjectId(gameId);

        Criteria criteria = Criteria.where(Constant.G_F_OID).is(gameObjectId);

        Query query = Query.query(criteria);

        Document result = template.findOne(query, Document.class, Constant.C_GAMES);

        // ObjectId id = result.getObjectId("_id");

        return Optional.ofNullable(result);
    }


   /* db.getCollection("reviews")
            .insert({
                "user" : "sheryl",
                "rating" : 1.3,
                "comment" : "Not bad lah",
                "ID" : "6790519247fc55943a3cc28b",      // game id 
                "posted" : "27-01-2025",
                "name" : "Samurai"                      // game name
            }) 
    */
    public Document insertReview(Document review)
    {
        
        Document result = template.insert(review, Constant.C_REVIEWS); // result is the insertedObject, if _id is excluded in docReviewToInsert, result will include the autogenerated _id

        System.out.println(">>>>> result inserted is: " + result); // just to see what result is

        return result;
    }


    /*
        db.getCollection("reviews")
            .findOne({"_id" : ObjectId('67978c1b40bbbba22fc191b9')})    // find the review ObjectId
     */

    public Optional<Document> getReviewById(String reviewId)
    {
        ObjectId reviewObjectId = new ObjectId(reviewId);

        Criteria criteria = Criteria.where(Constant.R_F_OID).is(reviewObjectId);

        Query query = Query.query(criteria);

        Document result = template.findOne(query, Document.class, Constant.C_REVIEWS);

        return Optional.ofNullable(result);
    }



    /*
        db.getCollection("reviews")
            .updateOne(
            {_id : ObjectId("67978c0240bbbba22fc191b8")},
            {
                $set: 
                {
                    rating : 3.2,
                    comment : "bye",
                    posted : "27-01-2025"
                },
              
                $push: 
                {
                    "edited" : 
                    {
                        rating : 3.2,
                        comment : "bye",
                        posted : "27-01-2025"
                    }
                
                }
            })
     */
    public long updateReview(String reviewId, Document editedEntryDoc)
    {
        ObjectId reviewObjectId = new ObjectId(reviewId);
        Criteria criteria = Criteria.where("_id").is(reviewObjectId);

        Query query = Query.query(criteria);

        String newComment = editedEntryDoc.getString("newComment");
        Double newRating = editedEntryDoc.getDouble("newRating");
        String postedDate = editedEntryDoc.getString("posted");

        // Set the new attributes and push the document into the array
        Update updateOps = new Update()
            .set("comment", newComment)
            .set("rating", newRating)
            .set("posted", postedDate)
            .push("edited", editedEntryDoc);
            // push into "edited" array 
            // Bson Array of Bson Objects when working w MongoDB
            // In ava this corresponds to a list of Document objects, if JsonObject was constructed, we need to convert to Document by parsing

        UpdateResult result = template.updateFirst(query, updateOps, Document.class, Constant.C_REVIEWS);

        System.out.printf("modified: d \n", result.getModifiedCount());
        System.out.printf("matched: d \n", result.getMatchedCount());
        System.out.printf("upsert id: d \n", result.getUpsertedId());

        return result.getModifiedCount();
    }
    

    /*
        db.getCollection("reviews")
        .findOne( 
            { _id: ObjectId("67978c0240bbbba22fc191b8") },
            { edited : 1, _id : 0 } )
     */
    public Document getReviewHistory (String reviewId)
    {
        ObjectId revObjectId = new ObjectId(reviewId);

        Criteria criteria = Criteria.where("_id").is(revObjectId);
        Query query = Query.query(criteria);

        query.fields()
            .include("edited")
            .exclude("_id");

        Document result = template.findOne(query, Document.class, Constant.C_REVIEWS);

        return result;
    }

    // Array of Bson Objects which corresponds to a list of documents in java
    // { 
    //     "edited" : [
    //         {
    //             "rating" : 1.8,
    //             "comment" : "nani",
    //             "posted" : "27-01-2025"
    //         },
    //         {
    //             "rating" : NumberInt(2),
    //             "comment" : "hello",
    //             "posted" : "27-01-2025"
    //         },
    //         {
    //             "rating" : 3.2,
    //             "comment" : "bye",
    //             "posted" : "27-01-2025"
    //         }
    //     ]
    // }
    
}
